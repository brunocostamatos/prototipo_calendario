{"ast":null,"code":"function GetSpreaker(setDados, setPodcast, setListaProgramas, setProgramaNoticia) {\n  let chave_acesso = \"20e75b947a1909b99b242724438ed46dad9576b1\";\n  var lista_programas = [];\n  var programa_noticia = [];\n  fetch(`https://api.spreaker.com/v2/me?oauth2_access_token=` + chave_acesso).then(function (response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    return response;\n  }).then(response => response.json()).then(dados => {\n    setDados(dados.response.user);\n    return dados;\n  }).then(dados => {\n    if (dados.response.user.user_id != undefined) {\n      fetch(`https://api.spreaker.com/v2/users/` + dados.response.user.user_id + `/shows`).then(response => response.json()).then(podcasts => {\n        setPodcast(podcasts.response.items);\n        return podcasts;\n      }).then(podcasts => {\n        let tamanho = podcasts.response.items.length;\n\n        for (var i = 0; i < tamanho; i++) {\n          if (podcasts.response.items[i].title != \"Rádio UFRJ - Informação & Conhecimento\") {\n            fetch(`https://api.spreaker.com/v2/shows/` + podcasts.response.items[i].show_id).then(response => response.json()).then(programas => {\n              if (programas.response.show.last_episode_at != null) {\n                lista_programas.push({\n                  show_id: programas.response.show.show_id,\n                  title: programas.response.show.title,\n                  datacao_filtrada: new Date(programas.response.show.last_episode_at.split(' ')[0]),\n                  last_episode_at: programas.response.show.last_episode_at,\n                  image_url: programas.response.show.image_url,\n                  descricao_programa: programas.response.show.description\n                });\n              }\n            });\n          } else {\n            fetch(`https://api.spreaker.com/v2/shows/` + podcasts.response.items[i].show_id).then(response => response.json()).then(programas => {\n              programa_noticia.push({\n                show_id: programas.response.show.show_id,\n                title: programas.response.show.title,\n                image_url: programas.response.show.image_url,\n                descricao_programa: programas.response.show.description\n              });\n            });\n          }\n        }\n\n        setProgramaNoticia(programa_noticia);\n        setListaProgramas(lista_programas);\n      });\n    }\n  });\n}\n\n_c = GetSpreaker;\nexport default GetSpreaker;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetSpreaker\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/minha-primeira-app/src/getSpreaker.js"],"names":["GetSpreaker","setDados","setPodcast","setListaProgramas","setProgramaNoticia","chave_acesso","lista_programas","programa_noticia","fetch","then","response","ok","Error","statusText","json","dados","user","user_id","undefined","podcasts","items","tamanho","length","i","title","show_id","programas","show","last_episode_at","push","datacao_filtrada","Date","split","image_url","descricao_programa","description"],"mappings":"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","sourcesContent":["function GetSpreaker(setDados, setPodcast, setListaProgramas, setProgramaNoticia) {\n    let chave_acesso = \"20e75b947a1909b99b242724438ed46dad9576b1\";\n    var lista_programas = [];\n    var programa_noticia = [];\n\n    fetch(`https://api.spreaker.com/v2/me?oauth2_access_token=` + chave_acesso)\n        \n    .then( function (response){\n        if(!response.ok){\n            throw Error(response.statusText);\n        }\n        return response;\n    })\n    .then((response)=> response.json())\n        \n    .then((dados) => {    \n        setDados(dados.response.user)    \n        return dados;    \n    })\n    \n    .then((dados) => {    \n        if (dados.response.user.user_id != undefined) {    \n            fetch(`https://api.spreaker.com/v2/users/` + dados.response.user.user_id +`/shows`)        \n            .then((response) => response.json())        \n            .then((podcasts) => {        \n                setPodcast(podcasts.response.items)  \n         \n                return podcasts;        \n            })\n                    \n            .then((podcasts) => {        \n                let tamanho = podcasts.response.items.length;        \n                for (var i = 0; i < tamanho; i++) {        \n                    if (podcasts.response.items[i].title != \"Rádio UFRJ - Informação & Conhecimento\") {        \n                        fetch(`https://api.spreaker.com/v2/shows/` + podcasts.response.items[i].show_id)        \n                        .then((response) => response.json())        \n                        .then((programas)=>{        \n                            if (programas.response.show.last_episode_at != null){        \n                                lista_programas.push({        \n                                    show_id: programas.response.show.show_id,        \n                                    title: programas.response.show.title,        \n                                    datacao_filtrada: new Date(programas.response.show.last_episode_at.split(' ')[0]),        \n                                    last_episode_at: programas.response.show.last_episode_at,        \n                                    image_url: programas.response.show.image_url,        \n                                    descricao_programa: programas.response.show.description        \n                                });        \n                            }        \n                        })        \n                    }          \n                    else{        \n                        fetch(`https://api.spreaker.com/v2/shows/` + podcasts.response.items[i].show_id)        \n                        .then((response) => response.json())        \n                        .then((programas)=>{        \n                            programa_noticia.push({        \n                                show_id: programas.response.show.show_id,            \n                                title: programas.response.show.title,        \n                                image_url: programas.response.show.image_url,        \n                                descricao_programa: programas.response.show.description        \n                            })        \n                        })        \n                    }        \n                }        \n                setProgramaNoticia(programa_noticia)        \n                setListaProgramas(lista_programas)\n               \n            });    \n        }      \n    })\n}\n\nexport default GetSpreaker"]},"metadata":{},"sourceType":"module"}