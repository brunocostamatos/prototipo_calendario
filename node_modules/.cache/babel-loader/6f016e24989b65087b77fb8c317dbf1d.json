{"ast":null,"code":"function GetEpisode(PodcastID, setListaEpisodios) {\n  var lista_episodio = [];\n  fetch(`https://api.spreaker.com/v2/shows/` + PodcastID + `/episodes?limit=5`\n  /* ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS*/\n  ).then(response => response.json()).then(episodes => {\n    lista_episodio.push({\n      episode_id: episodes.response.episode_id,\n      title: episodes.response.title,\n      datacao_filtrada: new Date(episodes.response.published_at.split(' ')[0]),\n      published_at: episodes.response.published_at,\n      descricao_episodio: episodes.response.description\n    }); //console.log(episodes.response)\n\n    setListaEpisodios(lista_episodio);\n    return episodes;\n  }).then(episodes => {\n    let quantidade_episodios = episodes.response.items.length;\n\n    for (var i = 0; i < quantidade_episodios; i++) {\n      fetch(`https://api.spreaker.com/v2/episodes/` + episodes.response.items[i].episode_id).then(response => response.json()).then(episodio => {\n        lista_episodio.push({\n          episode_id: episodio.response.episode.episode_id,\n          title: episodio.response.episode.title,\n          datacao_filtrada: new Date(episodio.response.episode.published_at.split(' ')[0]),\n          published_at: episodio.response.episode.published_at,\n          descricao_episodio: episodio.response.episode.description\n        });\n      });\n    }\n\n    const listaEpisodiosFiltrados = lista_episodio.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada);\n    console.log(listaEpisodiosFiltrados); //setListaEpisodios(lista_episodio)\n  });\n}\n\n_c = GetEpisode;\nexport default GetEpisode;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEpisode\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/minha-primeira-app/src/getEpisode.js"],"names":["GetEpisode","PodcastID","setListaEpisodios","lista_episodio","fetch","then","response","json","episodes","push","episode_id","title","datacao_filtrada","Date","published_at","split","descricao_episodio","description","quantidade_episodios","items","length","i","episodio","episode","listaEpisodiosFiltrados","sort","a","b","console","log"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,SAApB,EAA+BC,iBAA/B,EAAiD;AAC7C,MAAIC,cAAc,GAAC,EAAnB;AACAC,EAAAA,KAAK,CAAE,oCAAD,GACcH,SADd,GAEe;AAAmB;AAFnC,GAAL,CAICI,IAJD,CAIOC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EAJlB,EAKCF,IALD,CAKOG,QAAD,IAAc;AAChBL,IAAAA,cAAc,CAACM,IAAf,CAAoB;AAAEC,MAAAA,UAAU,EAAEF,QAAQ,CAACF,QAAT,CAAkBI,UAAhC;AAA4CC,MAAAA,KAAK,EAAEH,QAAQ,CAACF,QAAT,CAAkBK,KAArE;AAA4EC,MAAAA,gBAAgB,EAAE,IAAIC,IAAJ,CAASL,QAAQ,CAACF,QAAT,CAAkBQ,YAAlB,CAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAT,CAA9F;AAAsJD,MAAAA,YAAY,EAAEN,QAAQ,CAACF,QAAT,CAAkBQ,YAAtL;AAAoME,MAAAA,kBAAkB,EAAER,QAAQ,CAACF,QAAT,CAAkBW;AAA1O,KAApB,EADgB,CAGhB;;AACAf,IAAAA,iBAAiB,CAACC,cAAD,CAAjB;AACA,WAAOK,QAAP;AACH,GAXD,EAeCH,IAfD,CAeOG,QAAD,IAAY;AACd,QAAIU,oBAAoB,GAAGV,QAAQ,CAACF,QAAT,CAAkBa,KAAlB,CAAwBC,MAAnD;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGH,oBAAjB,EAAuCG,CAAC,EAAxC,EAA2C;AACvCjB,MAAAA,KAAK,CAAE,uCAAD,GAAwCI,QAAQ,CAACF,QAAT,CAAkBa,KAAlB,CAAwBE,CAAxB,EAA2BX,UAApE,CAAL,CACCL,IADD,CACOC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEOiB,QAAD,IAAY;AACdnB,QAAAA,cAAc,CAACM,IAAf,CAAoB;AAAEC,UAAAA,UAAU,EAAEY,QAAQ,CAAChB,QAAT,CAAkBiB,OAAlB,CAA0Bb,UAAxC;AAAoDC,UAAAA,KAAK,EAAEW,QAAQ,CAAChB,QAAT,CAAkBiB,OAAlB,CAA0BZ,KAArF;AAA4FC,UAAAA,gBAAgB,EAAE,IAAIC,IAAJ,CAASS,QAAQ,CAAChB,QAAT,CAAkBiB,OAAlB,CAA0BT,YAA1B,CAAuCC,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,CAAT,CAA9G;AAA8KD,UAAAA,YAAY,EAAEQ,QAAQ,CAAChB,QAAT,CAAkBiB,OAAlB,CAA0BT,YAAtN;AAAoOE,UAAAA,kBAAkB,EAAEM,QAAQ,CAAChB,QAAT,CAAkBiB,OAAlB,CAA0BN;AAAlR,SAApB;AAGH,OAND;AAOH;;AACD,UAAMO,uBAAuB,GAAGrB,cAAc,CAACsB,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACf,gBAAF,GAAqBc,CAAC,CAACd,gBAArD,CAAhC;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,uBAAZ,EAbc,CAed;AACH,GA/BD;AAgCH;;KAlCQxB,U;AAoCT,eAAeA,UAAf","sourcesContent":["function GetEpisode(PodcastID, setListaEpisodios){\n    var lista_episodio=[];\n    fetch(`https://api.spreaker.com/v2/shows/` +\n                        PodcastID +\n                        `/episodes?limit=5` /* ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS*/\n    )\n    .then((response)=>response.json())\t\n    .then((episodes) => {\n        lista_episodio.push({ episode_id: episodes.response.episode_id, title: episodes.response.title, datacao_filtrada: new Date(episodes.response.published_at.split(' ')[0]), published_at: episodes.response.published_at, descricao_episodio: episodes.response.description}\n        )\n        //console.log(episodes.response)\n        setListaEpisodios(lista_episodio)\n        return episodes;\n    })\n\n\n\n    .then((episodes)=>{\n        let quantidade_episodios = episodes.response.items.length\n        \n        for(var i=0; i < quantidade_episodios; i++){\n            fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n            .then((response)=>response.json())\n            .then((episodio)=>{\n                lista_episodio.push({ episode_id: episodio.response.episode.episode_id, title: episodio.response.episode.title, datacao_filtrada: new Date(episodio.response.episode.published_at.split(' ')[0]), published_at: episodio.response.episode.published_at, descricao_episodio: episodio.response.episode.description}\n                )\n                \n            })      \n        }    \n        const listaEpisodiosFiltrados = lista_episodio.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada)\n        console.log(listaEpisodiosFiltrados)\n        \n        //setListaEpisodios(lista_episodio)\n    })\n}\n\nexport default GetEpisode\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}