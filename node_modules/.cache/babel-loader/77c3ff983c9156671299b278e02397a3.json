{"ast":null,"code":"import React, { useState, useReducer, useRef, useMemo, useCallback, useEffect, useContext, useLayoutEffect } from 'react';\nimport { Howl } from 'howler';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Actions;\n\n(function (Actions) {\n  Actions[Actions[\"START_LOAD\"] = 0] = \"START_LOAD\";\n  Actions[Actions[\"ON_LOAD\"] = 1] = \"ON_LOAD\";\n  Actions[Actions[\"ON_PLAY\"] = 2] = \"ON_PLAY\";\n  Actions[Actions[\"ON_END\"] = 3] = \"ON_END\";\n  Actions[Actions[\"ON_PAUSE\"] = 4] = \"ON_PAUSE\";\n  Actions[Actions[\"ON_STOP\"] = 5] = \"ON_STOP\";\n  Actions[Actions[\"ON_PLAY_ERROR\"] = 6] = \"ON_PLAY_ERROR\";\n  Actions[Actions[\"ON_LOAD_ERROR\"] = 7] = \"ON_LOAD_ERROR\";\n})(Actions || (Actions = {}));\n\nvar initialState = {\n  loading: true,\n  playing: false,\n  stopped: true,\n  ended: false,\n  error: null,\n  duration: 0,\n  ready: false\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Actions.START_LOAD:\n      return _extends({}, state, {\n        loading: true,\n        stopped: true,\n        ready: false,\n        error: null,\n        duration: 0\n      });\n\n    case Actions.ON_LOAD:\n      return _extends({}, state, {\n        loading: false,\n        duration: action.duration,\n        ended: false,\n        ready: true\n      });\n\n    case Actions.ON_PLAY:\n      return _extends({}, state, {\n        playing: true,\n        ended: false,\n        stopped: false\n      });\n\n    case Actions.ON_STOP:\n      return _extends({}, state, {\n        stopped: true,\n        playing: false\n      });\n\n    case Actions.ON_END:\n      return _extends({}, state, {\n        stopped: true,\n        playing: false,\n        ended: true\n      });\n\n    case Actions.ON_PAUSE:\n      return _extends({}, state, {\n        playing: false\n      });\n\n    case Actions.ON_PLAY_ERROR:\n      return _extends({}, state, {\n        playing: false,\n        stopped: true,\n        error: action.error\n      });\n\n    case Actions.ON_LOAD_ERROR:\n      return _extends({}, state, {\n        playing: false,\n        stopped: true,\n        loading: false,\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar playerContext = /*#__PURE__*/React.createContext(null);\nvar positionContext = /*#__PURE__*/React.createContext({\n  position: 0,\n  setPosition: function setPosition() {}\n});\n\nfunction AudioPlayerProvider(_ref) {\n  var children = _ref.children,\n      value = _ref.value;\n\n  var _useState = useState(null),\n      player = _useState[0],\n      setPlayer = _useState[1];\n\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer$ = _useReducer[0],\n      loading = _useReducer$.loading,\n      error = _useReducer$.error,\n      playing = _useReducer$.playing,\n      stopped = _useReducer$.stopped,\n      duration = _useReducer$.duration,\n      ready = _useReducer$.ready,\n      ended = _useReducer$.ended,\n      dispatch = _useReducer[1];\n\n  var playerRef = useRef();\n  var prevPlayer = useRef();\n\n  var _useState2 = useState(0),\n      position = _useState2[0],\n      setPosition = _useState2[1];\n\n  var positionContextValue = useMemo(function () {\n    return {\n      position: position,\n      setPosition: setPosition\n    };\n  }, [position, setPosition]);\n  var constructHowl = useCallback(function (audioProps) {\n    return new Howl(audioProps);\n  }, []);\n  var load = useCallback(function (_ref2) {\n    var src = _ref2.src,\n        _ref2$autoplay = _ref2.autoplay,\n        autoplay = _ref2$autoplay === void 0 ? false : _ref2$autoplay,\n        _ref2$html = _ref2.html5,\n        html5 = _ref2$html === void 0 ? false : _ref2$html,\n        rest = _objectWithoutPropertiesLoose(_ref2, [\"src\", \"autoplay\", \"html5\"]);\n\n    var wasPlaying = false;\n\n    if (playerRef.current) {\n      // don't do anything if we're asked to reload the same source\n      // @ts-ignore the _src argument actually exists\n      var _src = playerRef.current._src; // internal Howl _src property is sometimes an array and other times a single string\n      // still need to to do more research on why this is\n\n      var prevSrc = Array.isArray(_src) ? _src[0] : _src;\n      if (prevSrc === src) return; // if the previous sound is still loading then destroy it as soon as it finishes\n\n      if (loading) {\n        prevPlayer.current = playerRef.current;\n        prevPlayer.current.once(\"load\", function () {\n          var _prevPlayer$current;\n\n          (_prevPlayer$current = prevPlayer.current) === null || _prevPlayer$current === void 0 ? void 0 : _prevPlayer$current.unload();\n        });\n      }\n\n      wasPlaying = playerRef.current.playing();\n\n      if (wasPlaying) {\n        playerRef.current.stop(); // remove event handlers from player that is about to be replaced\n\n        playerRef.current.off();\n        playerRef.current = undefined;\n      }\n    } // signal that the loading process has begun\n\n\n    dispatch({\n      type: Actions.START_LOAD\n    }); // create a new player\n\n    var howl = constructHowl(_extends({\n      src: src,\n      autoplay: wasPlaying || autoplay,\n      html5: html5\n    }, rest)); // if this howl has already been loaded (cached) then fire the load action\n    // @ts-ignore _state exists\n\n    if (howl._state === \"loaded\") {\n      dispatch({\n        type: Actions.ON_LOAD,\n        duration: howl.duration()\n      });\n    }\n\n    howl.on(\"load\", function () {\n      return void dispatch({\n        type: Actions.ON_LOAD,\n        duration: howl.duration()\n      });\n    });\n    howl.on(\"play\", function () {\n      return void dispatch({\n        type: Actions.ON_PLAY\n      });\n    });\n    howl.on(\"end\", function () {\n      return void dispatch({\n        type: Actions.ON_END\n      });\n    });\n    howl.on(\"pause\", function () {\n      return void dispatch({\n        type: Actions.ON_PAUSE\n      });\n    });\n    howl.on(\"stop\", function () {\n      return void dispatch({\n        type: Actions.ON_STOP\n      });\n    });\n    howl.on(\"playerror\", function (_id, error) {\n      dispatch({\n        type: Actions.ON_PLAY_ERROR,\n        error: new Error(\"[Play error] \" + error)\n      });\n    });\n    howl.on(\"loaderror\", function (_id, error) {\n      dispatch({\n        type: Actions.ON_LOAD_ERROR,\n        error: new Error(\"[Load error] \" + error)\n      });\n    });\n    setPlayer(howl);\n    playerRef.current = howl;\n  }, [constructHowl, loading]);\n  useEffect(function () {\n    // unload the player on unmount\n    return function () {\n      if (playerRef.current) playerRef.current.unload();\n    };\n  }, []);\n  var contextValue = useMemo(function () {\n    return value ? value : {\n      player: player,\n      load: load,\n      error: error,\n      loading: loading,\n      playing: playing,\n      stopped: stopped,\n      ready: ready,\n      duration: duration,\n      ended: ended\n    };\n  }, [loading, error, playing, stopped, load, value, player, ready, duration, ended]);\n  return React.createElement(playerContext.Provider, {\n    value: contextValue\n  }, React.createElement(positionContext.Provider, {\n    value: positionContextValue\n  }, children));\n}\n\nvar noop = function noop() {};\n\nvar useAudioPlayer = function useAudioPlayer(options) {\n  var _useContext = useContext(playerContext),\n      player = _useContext.player,\n      load = _useContext.load,\n      rest = _objectWithoutPropertiesLoose(_useContext, [\"player\", \"load\"]);\n\n  useEffect(function () {\n    var _ref = options || {},\n        src = _ref.src,\n        restOptions = _objectWithoutPropertiesLoose(_ref, [\"src\"]); // if useAudioPlayer is called without arguments\n    // don't do anything: the user will have access\n    // to the current context\n\n\n    if (!src) return;\n    load(_extends({\n      src: src\n    }, restOptions));\n  }, [options, load]);\n  var togglePlayPause = useCallback(function () {\n    if (!player) return;\n\n    if (player.playing()) {\n      player.pause();\n    } else {\n      player.play();\n    }\n  }, [player]);\n  return _extends({}, rest, {\n    player: player,\n    play: player ? player.play.bind(player) : noop,\n    pause: player ? player.pause.bind(player) : noop,\n    stop: player ? player.stop.bind(player) : noop,\n    mute: player ? player.mute.bind(player) : noop,\n    volume: player ? player.volume.bind(player) : noop,\n    load: load,\n    togglePlayPause: togglePlayPause\n  });\n};\n/**\r\n * Abstraction for useLayoutEffect.\r\n *\r\n * It will use useLayoutEffect() on the client, but while rendering on the server it will use\r\n * useEffect() to avoid ssr servers warnings like \"useLayoutEffect does nothing on the server\".\r\n */\n\n\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n\nvar useAudioPosition = function useAudioPosition(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _config = config,\n      _config$highRefreshRa = _config.highRefreshRate,\n      highRefreshRate = _config$highRefreshRa === void 0 ? false : _config$highRefreshRa;\n\n  var _useContext = useContext(playerContext),\n      player = _useContext.player,\n      playing = _useContext.playing,\n      stopped = _useContext.stopped,\n      duration = _useContext.duration;\n\n  var _useContext2 = useContext(positionContext),\n      position = _useContext2.position,\n      setPosition = _useContext2.setPosition;\n\n  var animationFrameRef = useRef(); // sets position on player initialization and when the audio is stopped\n\n  useEffect(function () {\n    if (player) {\n      setPosition(player.seek());\n    }\n  }, [player, setPosition, stopped]); // updates position on a one second loop for low refresh rate default setting\n\n  useEffect(function () {\n    var timeout;\n    if (!highRefreshRate && player && playing) timeout = window.setInterval(function () {\n      return setPosition(player.seek());\n    }, 1000);\n    return function () {\n      return clearTimeout(timeout);\n    };\n  }, [highRefreshRate, player, playing, setPosition]); // updates position on a 60fps loop for high refresh rate setting\n\n  useIsomorphicLayoutEffect(function () {\n    var animate = function animate() {\n      setPosition(player === null || player === void 0 ? void 0 : player.seek());\n      animationFrameRef.current = requestAnimationFrame(animate);\n    }; // kick off a new animation cycle when the player is defined and starts playing\n\n\n    if (highRefreshRate && player && playing) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n    }\n\n    return function () {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [highRefreshRate, player, playing, setPosition]);\n  var seek = useCallback(function (position) {\n    if (!player) return 0; // it appears that howler returns the Howl object when seek is given a position\n    // to get the latest potion you must call seek again with no parameters\n\n    var result = player.seek(position);\n    var updatedPos = result.seek();\n    setPosition(updatedPos);\n    return updatedPos;\n  }, [player, setPosition]);\n  var percentComplete = useMemo(function () {\n    return position / duration * 100 || 0;\n  }, [duration, position]);\n  return {\n    position: position,\n    duration: duration,\n    seek: seek,\n    percentComplete: percentComplete\n  };\n};\n\nexport { AudioPlayerProvider, useAudioPlayer, useAudioPosition };","map":{"version":3,"sources":["../src/audioPlayerState.ts","../src/context.ts","../src/AudioPlayerProvider.tsx","../src/useAudioPlayer.ts","../src/useIsomorphicLayout.tsx","../src/useAudioPosition.ts"],"names":["Actions","initialState","loading","playing","stopped","ended","error","duration","ready","reducer","state","action","playerContext","React","positionContext","position","setPosition","AudioPlayerProvider","children","value","player","setPlayer","useState","dispatch","useReducer","playerRef","useRef","prevPlayer","positionContextValue","useMemo","constructHowl","useCallback","load","src","autoplay","html5","rest","wasPlaying","_src","prevSrc","Array","type","START_LOAD","howl","ON_PLAY","ON_END","ON_PAUSE","ON_STOP","useEffect","contextValue","noop","useAudioPlayer","useContext","restOptions","options","togglePlayPause","play","pause","stop","mute","volume","useIsomorphicLayoutEffect","useAudioPosition","config","highRefreshRate","animationFrameRef","clearTimeout","animate","requestAnimationFrame","cancelAnimationFrame","seek","result","updatedPos","percentComplete"],"mappings":"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","sourcesContent":["export enum Actions {\n    START_LOAD,\n    ON_LOAD,\n    ON_PLAY,\n    ON_END,\n    ON_PAUSE,\n    ON_STOP,\n    ON_PLAY_ERROR,\n    ON_LOAD_ERROR\n}\n\ninterface BaseAction {\n    type: Actions\n}\n\ninterface ErrorAction extends BaseAction {\n    error: Error\n}\n\ninterface LoadAction extends BaseAction {\n    duration: number\n}\n\ntype Action = BaseAction | ErrorAction | LoadAction\n\nexport interface AudioPlayerState {\n    loading: boolean\n    playing: boolean\n    stopped: boolean\n    error: Error | null\n    duration: number\n    ready: boolean\n    ended: boolean\n}\n\nexport const initialState: AudioPlayerState = {\n    loading: true,\n    playing: false,\n    stopped: true,\n    ended: false,\n    error: null,\n    duration: 0,\n    ready: false\n}\n\nexport function reducer(state: AudioPlayerState, action: Action) {\n    switch (action.type) {\n        case Actions.START_LOAD:\n            return {\n                ...state,\n                loading: true,\n                stopped: true,\n                ready: false,\n                error: null,\n                duration: 0\n            }\n        case Actions.ON_LOAD:\n            return {\n                ...state,\n                loading: false,\n                duration: (action as LoadAction).duration,\n                ended: false,\n                ready: true\n            }\n        case Actions.ON_PLAY:\n            return {\n                ...state,\n                playing: true,\n                ended: false,\n                stopped: false\n            }\n        case Actions.ON_STOP:\n            return {\n                ...state,\n                stopped: true,\n                playing: false\n            }\n        case Actions.ON_END:\n            return {\n                ...state,\n                stopped: true,\n                playing: false,\n                ended: true\n            }\n        case Actions.ON_PAUSE:\n            return {\n                ...state,\n                playing: false\n            }\n        case Actions.ON_PLAY_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                error: (action as ErrorAction).error\n            }\n        case Actions.ON_LOAD_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                loading: false,\n                error: (action as ErrorAction).error\n            }\n        default:\n            return state\n    }\n}\n","import React from \"react\"\nimport { AudioPlayerContext, AudioPlayerPositionContext } from \"./types\"\n\nexport const playerContext = React.createContext<AudioPlayerContext | null>(\n    null\n)\n\nexport const positionContext = React.createContext<AudioPlayerPositionContext>({\n    position: 0,\n    setPosition: () => {}\n})\n","import React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    useReducer,\n    useMemo\n} from \"react\"\nimport { Howl, HowlOptions } from \"howler\"\nimport { initialState, reducer, Actions } from \"./audioPlayerState\"\nimport { playerContext, positionContext } from \"./context\"\nimport { AudioPlayerContext } from \"./types\"\n\nexport interface AudioPlayerProviderProps {\n    children: React.ReactNode\n    value?: AudioPlayerContext\n}\n\nexport function AudioPlayerProvider({\n    children,\n    value\n}: AudioPlayerProviderProps) {\n    const [player, setPlayer] = useState<Howl | null>(null)\n    const [\n        { loading, error, playing, stopped, duration, ready, ended },\n        dispatch\n    ] = useReducer(reducer, initialState)\n\n    const playerRef = useRef<Howl>()\n    const prevPlayer = useRef<Howl>()\n\n    const [position, setPosition] = useState(0)\n    const positionContextValue = useMemo(\n        () => ({\n            position,\n            setPosition\n        }),\n        [position, setPosition]\n    )\n\n    const constructHowl = useCallback((audioProps: HowlOptions): Howl => {\n        return new Howl(audioProps)\n    }, [])\n\n    const load = useCallback(\n        ({ src, autoplay = false, html5 = false, ...rest }: HowlOptions) => {\n            let wasPlaying = false\n            if (playerRef.current) {\n                // don't do anything if we're asked to reload the same source\n                // @ts-ignore the _src argument actually exists\n                const { _src } = playerRef.current\n                // internal Howl _src property is sometimes an array and other times a single string\n                // still need to to do more research on why this is\n                const prevSrc = Array.isArray(_src) ? _src[0] : _src\n                if (prevSrc === src) return\n\n                // if the previous sound is still loading then destroy it as soon as it finishes\n                if (loading) {\n                    prevPlayer.current = playerRef.current\n                    prevPlayer.current.once(\"load\", () => {\n                        prevPlayer.current?.unload()\n                    })\n                }\n\n                wasPlaying = playerRef.current.playing()\n                if (wasPlaying) {\n                    playerRef.current.stop()\n                    // remove event handlers from player that is about to be replaced\n                    playerRef.current.off()\n                    playerRef.current = undefined\n                }\n            }\n\n            // signal that the loading process has begun\n            dispatch({ type: Actions.START_LOAD })\n\n            // create a new player\n            const howl = constructHowl({\n                src,\n                autoplay: wasPlaying || autoplay, // continues playing next song\n                html5,\n                ...rest\n            })\n\n            // if this howl has already been loaded (cached) then fire the load action\n            // @ts-ignore _state exists\n            if (howl._state === \"loaded\") {\n                dispatch({ type: Actions.ON_LOAD, duration: howl.duration() })\n            }\n\n            howl.on(\n                \"load\",\n                () =>\n                    void dispatch({\n                        type: Actions.ON_LOAD,\n                        duration: howl.duration()\n                    })\n            )\n            howl.on(\"play\", () => void dispatch({ type: Actions.ON_PLAY }))\n            howl.on(\"end\", () => void dispatch({ type: Actions.ON_END }))\n            howl.on(\"pause\", () => void dispatch({ type: Actions.ON_PAUSE }))\n            howl.on(\"stop\", () => void dispatch({ type: Actions.ON_STOP }))\n            howl.on(\"playerror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_PLAY_ERROR,\n                    error: new Error(\"[Play error] \" + error)\n                })\n            })\n            howl.on(\"loaderror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_LOAD_ERROR,\n                    error: new Error(\"[Load error] \" + error)\n                })\n            })\n\n            setPlayer(howl)\n            playerRef.current = howl\n        },\n        [constructHowl, loading]\n    )\n\n    useEffect(() => {\n        // unload the player on unmount\n        return () => {\n            if (playerRef.current) playerRef.current.unload()\n        }\n    }, [])\n\n    const contextValue: AudioPlayerContext = useMemo(() => {\n        return value\n            ? value\n            : {\n                  player,\n                  load,\n                  error,\n                  loading,\n                  playing,\n                  stopped,\n                  ready,\n                  duration,\n                  ended\n              }\n    }, [\n        loading,\n        error,\n        playing,\n        stopped,\n        load,\n        value,\n        player,\n        ready,\n        duration,\n        ended\n    ])\n\n    return (\n        <playerContext.Provider value={contextValue}>\n            <positionContext.Provider value={positionContextValue}>\n                {children}\n            </positionContext.Provider>\n        </playerContext.Provider>\n    )\n}\n","import { useCallback, useContext, useEffect } from \"react\"\nimport { Howl, HowlOptions } from \"howler\"\nimport { playerContext } from \"./context\"\nimport { AudioPlayerContext } from \"./types\"\n\nconst noop = () => {}\n\nexport type AudioPlayerControls = Omit<AudioPlayerContext, \"player\"> & {\n    play: Howl[\"play\"] | typeof noop\n    pause: Howl[\"pause\"] | typeof noop\n    stop: Howl[\"stop\"] | typeof noop\n    mute: Howl[\"mute\"] | typeof noop\n    volume: Howl[\"volume\"] | typeof noop\n    togglePlayPause: () => void\n    player: Howl | null\n}\n\nexport const useAudioPlayer = (options?: HowlOptions): AudioPlayerControls => {\n    const { player, load, ...rest } = useContext(playerContext)!\n\n    useEffect(() => {\n        const { src, ...restOptions } = options || {}\n        // if useAudioPlayer is called without arguments\n        // don't do anything: the user will have access\n        // to the current context\n        if (!src) return\n        load({ src, ...restOptions })\n    }, [options, load])\n\n    const togglePlayPause = useCallback(() => {\n        if (!player) return\n\n        if (player.playing()) {\n            player.pause()\n        } else {\n            player.play()\n        }\n    }, [player])\n\n    return {\n        ...rest,\n        player,\n        play: player ? player.play.bind(player) : noop,\n        pause: player ? player.pause.bind(player) : noop,\n        stop: player ? player.stop.bind(player) : noop,\n        mute: player ? player.mute.bind(player) : noop,\n        volume: player ? player.volume.bind(player) : noop,\n        load,\n        togglePlayPause\n    }\n}\n","import { useEffect, useLayoutEffect } from \"react\"\n\n/**\n * Abstraction for useLayoutEffect.\n *\n * It will use useLayoutEffect() on the client, but while rendering on the server it will use\n * useEffect() to avoid ssr servers warnings like \"useLayoutEffect does nothing on the server\".\n */\nconst useIsomorphicLayoutEffect =\n    typeof window !== \"undefined\" ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import { useCallback, useContext, useEffect, useMemo, useRef } from \"react\"\nimport { playerContext, positionContext } from \"./context\"\nimport { Howl } from \"howler\"\nimport useIsomorphicLayoutEffect from \"./useIsomorphicLayout\"\n\ninterface UseAudioPositionConfig {\n    highRefreshRate?: boolean\n}\n\ninterface AudioPosition {\n    position: number\n    duration: number\n    percentComplete: number\n    seek: (position: number) => number\n}\n\n// gives current audio position state - updates in an animation frame loop for animating audio visualizations\nexport const useAudioPosition = (\n    config: UseAudioPositionConfig = {}\n): AudioPosition => {\n    const { highRefreshRate = false } = config\n    const { player, playing, stopped, duration } = useContext(playerContext)!\n    const { position, setPosition } = useContext(positionContext)\n\n    const animationFrameRef = useRef<number>()\n\n    // sets position on player initialization and when the audio is stopped\n    useEffect(() => {\n        if (player) {\n            setPosition(player.seek() as number)\n        }\n    }, [player, setPosition, stopped])\n\n    // updates position on a one second loop for low refresh rate default setting\n    useEffect(() => {\n        let timeout: number\n        if (!highRefreshRate && player && playing)\n            timeout = window.setInterval(\n                () => setPosition(player.seek() as number),\n                1000\n            )\n        return () => clearTimeout(timeout)\n    }, [highRefreshRate, player, playing, setPosition])\n\n    // updates position on a 60fps loop for high refresh rate setting\n    useIsomorphicLayoutEffect(() => {\n        const animate = () => {\n            setPosition(player?.seek() as number)\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        // kick off a new animation cycle when the player is defined and starts playing\n        if (highRefreshRate && player && playing) {\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        return () => {\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current)\n            }\n        }\n    }, [highRefreshRate, player, playing, setPosition])\n\n    const seek = useCallback(\n        position => {\n            if (!player) return 0\n\n            // it appears that howler returns the Howl object when seek is given a position\n            // to get the latest potion you must call seek again with no parameters\n            const result = player.seek(position) as Howl\n            const updatedPos = result.seek() as number\n            setPosition(updatedPos)\n            return updatedPos\n        },\n        [player, setPosition]\n    )\n\n    const percentComplete = useMemo(() => {\n        return (position / duration) * 100 || 0\n    }, [duration, position])\n\n    return { position, duration, seek, percentComplete }\n}\n"]},"metadata":{},"sourceType":"module"}