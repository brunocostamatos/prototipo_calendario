{"ast":null,"code":"function GetEpisode(PodcastID, setListaNoticias, setListaEpisodios) {\n  /* fetch(`https://api.spreaker.com/v2/shows/` +\n                       PodcastID +\n                       `/episodes?limit=5` //ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS\n   )\n   .then((response)=>response.json())\t\n   .then((episodes) => {\n       return episodes;\n   })\n   .then((episodes)=>{\n       \n       \n       if(episodes.response.items[0].show_id != '4119263'){\n         \n           let quantidade_episodios = episodes.response.items.length\n           var lista_episodio=[];\n         \n           for(var i=0; i < quantidade_episodios; i++){\n                fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                   .then((response)=>response.json())\n                   .then((episodio)=>{\n                       \n                       lista_episodio.push(episodio.response.episode)\n                   })\n              }\n             setListaEpisodios(lista_episodio)\n           console.log(lista_episodio)\n       }  \n       else{\n           var lista_noticias=[];\n           for(var i=0; i < episodes.response.items.length; i++){\n               \n               fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                   .then((response)=>response.json())\n                   .then((episodio)=>{\n                       lista_noticias.push({\n                           episodio_id: episodio.response.episode.episode_id,\n                           descricao: episodio.response.episode.description,\n                           audio: episodio.response.episode.playback_url,\n                           titulo: episodio.response.episode.title\n                       })\n                   })\n             }\n           console.log(lista_noticias)\n           setListaNoticias(lista_noticias)\n         }\n       \n   })*/\n  const fetchTimeout = (url, ms, {\n    signal,\n    ...options\n  } = {}) => {\n    const controller = new AbortController();\n    const promise = fetch(url, {\n      signal: controller.signal,\n      ...options\n    });\n    if (signal) signal.addEventListener(\"abort\", () => controller.abort());\n    const timeout = setTimeout(() => controller.abort(), ms);\n    return promise.finally(() => clearTimeout(timeout));\n  };\n\n  const controller = new AbortController();\n  fetchTimeout(\"https://api.spreaker.com/v2/shows/4119263/episodes?limit=5\", 5000, {\n    signal: controller.signal\n  }).then(response => response.json()).then(episodes => {\n    return episodes;\n  }).then(episodes => {\n    if (episodes.response.items[0].show_id != '4119263') {\n      let quantidade_episodios = episodes.response.items.length;\n      var lista_episodio = [];\n\n      for (var i = 0; i < quantidade_episodios; i++) {\n        fetch(`https://api.spreaker.com/v2/episodes/` + episodes.response.items[i].episode_id, 5000, {\n          signal: controller.signal\n        }).then(response => response.json()).then(episodio => {\n          lista_episodio.push(episodio.response.episode);\n        });\n      }\n\n      setListaEpisodios(lista_episodio);\n    } else {\n      var lista_noticias = [];\n\n      for (var i = 0; i < episodes.response.items.length; i++) {\n        fetch(`https://api.spreaker.com/v2/episodes/` + episodes.response.items[i].episode_id), 5000, {\n          signal: controller.signal\n        }.then(response => response.json()).then(episodio => {\n          lista_noticias.push({\n            episodio_id: episodio.response.episode.episode_id,\n            descricao: episodio.response.episode.description,\n            audio: episodio.response.episode.playback_url,\n            titulo: episodio.response.episode.title\n          });\n        });\n      }\n\n      setListaNoticias(lista_noticias);\n    }\n  }).then(console.log).catch(error => {\n    if (error.name === \"AbortError\") {// fetch aborted either due to timeout \n    } else {// network error or json parsing error\n      }\n  });\n}\n\n_c = GetEpisode;\nexport default GetEpisode;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEpisode\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/descricao_funcional/src/getEpisode.js"],"names":["GetEpisode","PodcastID","setListaNoticias","setListaEpisodios","fetchTimeout","url","ms","signal","options","controller","AbortController","promise","fetch","addEventListener","abort","timeout","setTimeout","finally","clearTimeout","then","response","json","episodes","items","show_id","quantidade_episodios","length","lista_episodio","i","episode_id","episodio","push","episode","lista_noticias","episodio_id","descricao","description","audio","playback_url","titulo","title","console","log","catch","error","name"],"mappings":"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","sourcesContent":["function GetEpisode(PodcastID, setListaNoticias, setListaEpisodios){\n    \n   /* fetch(`https://api.spreaker.com/v2/shows/` +\n                        PodcastID +\n                        `/episodes?limit=5` //ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS\n    )\n    .then((response)=>response.json())\t\n    .then((episodes) => {\n        return episodes;\n    })\n    .then((episodes)=>{\n        \n        \n        if(episodes.response.items[0].show_id != '4119263'){\n          \n            let quantidade_episodios = episodes.response.items.length\n            var lista_episodio=[];\n          \n            for(var i=0; i < quantidade_episodios; i++){\n\n                fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                    .then((response)=>response.json())\n                    .then((episodio)=>{\n                        \n                        lista_episodio.push(episodio.response.episode)\n                    })\n\n              }\n\n\n            setListaEpisodios(lista_episodio)\n            console.log(lista_episodio)\n        }  \n        else{\n            var lista_noticias=[];\n            for(var i=0; i < episodes.response.items.length; i++){\n                \n                fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                    .then((response)=>response.json())\n                    .then((episodio)=>{\n                        lista_noticias.push({\n                            episodio_id: episodio.response.episode.episode_id,\n                            descricao: episodio.response.episode.description,\n                            audio: episodio.response.episode.playback_url,\n                            titulo: episodio.response.episode.title\n                        })\n                    })\n              }\n            console.log(lista_noticias)\n            setListaNoticias(lista_noticias)\n          }\n        \n    })*/\n\n    const fetchTimeout = (url, ms, { signal, ...options } = {}) => {\n        const controller = new AbortController();\n        const promise = fetch(url, { signal: controller.signal, ...options });\n        if (signal) signal.addEventListener(\"abort\", () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        return promise.finally(() => clearTimeout(timeout));\n    };\n\n    \n\n    const controller = new AbortController();\n\n   \n    \n    fetchTimeout(\"https://api.spreaker.com/v2/shows/4119263/episodes?limit=5\", 5000, { signal: controller.signal })\n        .then(response => response.json())\n        .then((episodes)=>{\n            return episodes;\n        })\n        .then((episodes)=>{\n        \n        \n            if(episodes.response.items[0].show_id != '4119263'){\n              \n                let quantidade_episodios = episodes.response.items.length\n                var lista_episodio=[];\n              \n                for(var i=0; i < quantidade_episodios; i++){\n    \n                    fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id, 5000, { signal: controller.signal })\n                        .then((response)=>response.json())\n                        .then((episodio)=>{\n                            \n                            lista_episodio.push(episodio.response.episode)\n                        })\n    \n                  }\n    \n    \n                setListaEpisodios(lista_episodio)\n                \n            }  \n            else{\n                var lista_noticias=[];\n                for(var i=0; i < episodes.response.items.length; i++){\n                    \n                    fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id), 5000, { signal: controller.signal }\n                        .then((response)=>response.json())\n                        .then((episodio)=>{\n                            lista_noticias.push({\n                                episodio_id: episodio.response.episode.episode_id,\n                                descricao: episodio.response.episode.description,\n                                audio: episodio.response.episode.playback_url,\n                                titulo: episodio.response.episode.title\n                            })\n                        })\n                  }\n                \n                setListaNoticias(lista_noticias)\n              }\n            \n        })\n        .then(console.log)\n        .catch(error => {\n            if (error.name === \"AbortError\") {\n                // fetch aborted either due to timeout \n            } else {\n                // network error or json parsing error\n            }\n        });\n        \n    \n \n}\nexport default GetEpisode\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}