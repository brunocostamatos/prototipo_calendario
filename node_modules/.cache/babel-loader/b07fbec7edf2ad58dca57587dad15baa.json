{"ast":null,"code":"var _jsxFileName = \"/home/bruno/\\xC1rea de Trabalho/minha-primeira-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, Component, useEffect, useState } from \"react\";\nimport GetSpreaker from \"/src/getSpreaker.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const [podcast, setPodcast] = useState([]);\n  const [dados, setDados] = useState([]);\n  const [userID, setUserID] = useState([]);\n  const [listaProgramas, setListaProgramas] = useState([]);\n  const [noticias, setNoticias] = useState(['BrancoDi']);\n  useEffect(() => {\n    search();\n  }, []);\n  GetSpreaker(setDados, setPodcast, setListaProgramas);\n  console.log(noticias);\n\n  function getImages() {\n    const listaProgramasFiltrada = listaProgramas.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada);\n    let content = [];\n\n    for (let el in listaProgramasFiltrada) {\n      content.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Avatar\",\n        src: listaProgramasFiltrada[el].image_url,\n        width: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 20\n      }, this));\n    }\n\n    return content;\n  }\n\n  if (dados !== []) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Resultados para: \", dados.fullname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), dados.image_url !== undefined && getImages()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Main, \"P6+D3IX04HKXtVQOJlviDUmvnAM=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/minha-primeira-app/src/App.js"],"names":["React","Component","useEffect","useState","GetSpreaker","Main","podcast","setPodcast","dados","setDados","userID","setUserID","listaProgramas","setListaProgramas","noticias","setNoticias","search","console","log","getImages","listaProgramasFiltrada","sort","a","b","datacao_filtrada","content","el","push","image_url","fullname","undefined"],"mappings":";;;AAAA,SACEA,KADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,QAJF,QAKO,OALP;AAOA,OAAOC,WAAP,MAAwB,qBAAxB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAEd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAC,UAAD,CAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,MAAM;AACP,GAFQ,EAEN,EAFM,CAAT;AAIAZ,EAAAA,WAAW,CAACK,QAAD,EAAWF,UAAX,EAAuBM,iBAAvB,CAAX;AAEFI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AAEE,WAASK,SAAT,GAAoB;AAClB,UAAMC,sBAAsB,GAAGR,cAAc,CAACS,IAAf,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,gBAAF,GAAqBF,CAAC,CAACE,gBAArD,CAA/B;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,EAAT,IAAeN,sBAAf,EAAsC;AACpCK,MAAAA,OAAO,CAACE,IAAR,eAAa;AAAK,QAAA,GAAG,EAAC,QAAT;AAAkB,QAAA,GAAG,EAAEP,sBAAsB,CAACM,EAAD,CAAtB,CAA2BE,SAAlD;AAA6D,QAAA,KAAK,EAAE;AAApE;AAAA;AAAA;AAAA;AAAA,cAAb;AACD;;AACD,WAAOH,OAAP;AACA;;AAEF,MAAIjB,KAAK,KAAK,EAAd,EAAkB;AAChB,wBACE;AAAA,8BACE;AAAA,wCAAqBA,KAAK,CAACqB,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEErB,KAAK,CAACoB,SAAN,KAAoBE,SAApB,IACAX,SAAS,EAHX;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;AACF;;GAnCQd,I;;KAAAA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import {\n  React,\n  Component,\n  useEffect,\n  useState\n} from \"react\";\n\nimport GetSpreaker from \"/src/getSpreaker.js\"\n\nfunction Main() {\n\n  const [podcast, setPodcast] = useState([])\n  const [dados, setDados] = useState([])\n  const [userID, setUserID] = useState([])\n  const [listaProgramas, setListaProgramas] = useState([])\n  const [noticias, setNoticias] = useState(['BrancoDi'])\n\n  useEffect(() => {\n    search()\n  }, []);\n\n  GetSpreaker(setDados, setPodcast, setListaProgramas)\n\nconsole.log(noticias)\n\n  function getImages(){\n    const listaProgramasFiltrada = listaProgramas.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada)\n    let content = []\n    for (let el in listaProgramasFiltrada){\n      content.push(<img alt=\"Avatar\" src={listaProgramasFiltrada[el].image_url} width={50} />)\n    }\n    return content\n   }\n  \n  if (dados !== []) {\n    return (\n      <div>\n        <p>Resultados para: {dados.fullname}</p>\n       {dados.image_url !== undefined &&(\n        getImages()\n       )}\n      </div>\n    )\n  }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}