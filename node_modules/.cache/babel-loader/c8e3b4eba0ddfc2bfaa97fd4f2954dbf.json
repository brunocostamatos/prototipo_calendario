{"ast":null,"code":"var _jsxFileName = \"/home/bruno/\\xC1rea de Trabalho/descricao_funcional/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, Component, useEffect, useState } from \"react\";\nimport GetSpreaker from \"./getSpreaker.js\";\nimport GetEpisode from \"./getEpisode.js\";\nimport GetDescription from \"./getDescription.js\";\nimport MultiPlayer from \"./Multiplayer.js\";\nimport Prismic from '@prismicio/client';\nimport { Date, Link, RichText } from 'prismic-reactjs';\nimport GetPrismic from \"./getPrismic.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const [podcast, setPodcast] = useState([]);\n  const [dados, setDados] = useState([]);\n  const [userID, setUserID] = useState([]);\n  const [listaProgramas, setListaProgramas] = useState([]);\n  const [programaNoticia, setProgramaNoticia] = useState([]);\n  const [listaEpisodios, setListaEpisodios] = useState([]);\n  const [listaNoticias, setListaNoticias] = useState([]);\n  const [descricaoEpisodio, setDescricaoEpisodio] = useState([]);\n  useEffect(() => {\n    GetSpreaker(setDados, setListaProgramas, setProgramaNoticia);\n    GetEpisode(4119263, setListaNoticias, 0); //GetPrismic(Client)\n    //GetDescription(43826958, setDescricaoEpisodio) //Pegando a descrição de forma estática de um episodio em específico \n  }, []);\n  const apiEndpoint = 'https://testecalendario.prismic.io/api/v2';\n  const client = Prismic.client(apiEndpoint);\n  const response = client.query(Prismic.Predicates.at('document.type', 'blog_post'), {\n    orderings: '[my.blog_post.date desc]'\n  });\n\n  if (response) {\n    // response is the response object, response.results holds the documents\n    console.log(response);\n  }\n\n  function cria_player(lista_ordenada_episodios) {\n    lista_ordenada_episodios = lista_ordenada_episodios;\n    const iframe = document.createElement('iframe');\n    const html = \"https://widget.spreaker.com/player?episode_id=\" + lista_ordenada_episodios.episodio_id + \"&hide-logo=true\";\n    /*No link https://developers.spreaker.com/guides/embedding-the-player/ ele mostra as opções que existem no player, como mudaça para o tema dark, autoplay e \n    coisas do genero. Para implementar tais opções, só é necessario adicionar após a variável de ID do episodio ou do show um &... \n    Como está acima, &theme=dark ativa o tema dark, se fosse uma opção como hide-logo seria &hide-logo=true. */\n\n    iframe.src = html;\n    iframe.sandbox = 'allow-scripts allow-popups';\n    iframe.width = \"50%\";\n    iframe.height = \"100px\";\n    iframe.frameborder = \"0\";\n    document.body.appendChild(iframe);\n  }\n\n  function getImages() {\n    const listaProgramasFiltrada = listaProgramas.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada);\n    listaNoticias.sort((a, b) => parseInt(b.episodio_id) - parseInt(a.episodio_id));\n    let content = [];\n\n    for (let el in listaProgramasFiltrada) {\n      content.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        onMouseOver: () => GetEpisode(listaProgramasFiltrada[el].show_id, 0, setListaEpisodios),\n        alt: \"Avatar\",\n        src: listaProgramasFiltrada[el].image_url,\n        width: 176,\n        height: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this));\n    }\n\n    if (programaNoticia.length > 0) {\n      content.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Avatar\",\n        src: programaNoticia[0].image_url,\n        width: 176,\n        height: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this));\n    }\n\n    if (listaNoticias.length == 5) {\n      for (let el in listaNoticias) {\n        content.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [listaNoticias[el].titulo, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 53\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: listaNoticias[el].descricao\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 62\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => cria_player(listaNoticias[el]),\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 104\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 170\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 179\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 22\n        }, this));\n      }\n    }\n\n    return content;\n  }\n\n  if (listaNoticias !== []) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MultiPlayer, {\n        urls: [\"http://servidor21.brlogic.com:7712/live\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {},\n        src: \"fundo_broadcast.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Resultados para: \", dados.fullname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), dados.image_url !== undefined && getImages()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Main, \"x6oZhnsYCMHTWc3hG5tyVBYwprM=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/descricao_funcional/src/App.js"],"names":["React","Component","useEffect","useState","GetSpreaker","GetEpisode","GetDescription","MultiPlayer","Prismic","Date","Link","RichText","GetPrismic","Main","podcast","setPodcast","dados","setDados","userID","setUserID","listaProgramas","setListaProgramas","programaNoticia","setProgramaNoticia","listaEpisodios","setListaEpisodios","listaNoticias","setListaNoticias","descricaoEpisodio","setDescricaoEpisodio","apiEndpoint","client","response","query","Predicates","at","orderings","console","log","cria_player","lista_ordenada_episodios","iframe","document","createElement","html","episodio_id","src","sandbox","width","height","frameborder","body","appendChild","getImages","listaProgramasFiltrada","sort","a","b","datacao_filtrada","parseInt","content","el","push","show_id","image_url","length","titulo","descricao","fullname","undefined"],"mappings":"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","sourcesContent":["import {\n  React,\n  Component,\n  useEffect,\n  useState\n} from \"react\";\n\nimport GetSpreaker from \"./getSpreaker.js\"\nimport GetEpisode from \"./getEpisode.js\"\nimport GetDescription from \"./getDescription.js\"\nimport MultiPlayer from \"./Multiplayer.js\";\nimport Prismic from '@prismicio/client'\nimport { Date, Link, RichText } from 'prismic-reactjs'\nimport GetPrismic from \"./getPrismic.js\";\n\n\n\nfunction Main() {\n  const [podcast, setPodcast] = useState([])\n  const [dados, setDados] = useState([])\n  const [userID, setUserID] = useState([])\n  const [listaProgramas, setListaProgramas] = useState([])\n  const [programaNoticia, setProgramaNoticia] = useState([])\n  const [listaEpisodios, setListaEpisodios] = useState([])\n  const [listaNoticias, setListaNoticias] = useState([])\n  const [descricaoEpisodio, setDescricaoEpisodio] = useState([])\n\n\n\n\n  useEffect(() => {\n    GetSpreaker(setDados, setListaProgramas, setProgramaNoticia)\n    GetEpisode(4119263, setListaNoticias, 0)\n    //GetPrismic(Client)\n    //GetDescription(43826958, setDescricaoEpisodio) //Pegando a descrição de forma estática de um episodio em específico \n  }, []);\n\n  const apiEndpoint = 'https://testecalendario.prismic.io/api/v2'\nconst client = Prismic.client(apiEndpoint)\n\nconst response = client.query(\n  Prismic.Predicates.at('document.type', 'blog_post'),\n  { orderings: '[my.blog_post.date desc]' }\n)\nif (response) {\n  // response is the response object, response.results holds the documents\n  console.log(response)\n}\n\n\n  \n\n\n  \n  function cria_player(lista_ordenada_episodios){\n    lista_ordenada_episodios = lista_ordenada_episodios\n    const iframe = document.createElement('iframe');\n    const html = \"https://widget.spreaker.com/player?episode_id=\"  + lista_ordenada_episodios.episodio_id + \"&hide-logo=true\"; \n    /*No link https://developers.spreaker.com/guides/embedding-the-player/ ele mostra as opções que existem no player, como mudaça para o tema dark, autoplay e \n    coisas do genero. Para implementar tais opções, só é necessario adicionar após a variável de ID do episodio ou do show um &... \n    Como está acima, &theme=dark ativa o tema dark, se fosse uma opção como hide-logo seria &hide-logo=true. */ \n    iframe.src = html;\n    iframe.sandbox = 'allow-scripts allow-popups';\n    iframe.width = \"50%\";\n    iframe.height=\"100px\";\n    iframe.frameborder=\"0\";\n    document.body.appendChild(iframe);\n  }\n\n  function getImages(){\n    const listaProgramasFiltrada = listaProgramas.sort((a, b) => b.datacao_filtrada - a.datacao_filtrada)\n    listaNoticias.sort((a, b) => parseInt(b.episodio_id) - parseInt(a.episodio_id))\n    \n    \n    let content = []\n    for (let el in listaProgramasFiltrada){\n      content.push(<img onMouseOver={() => GetEpisode(listaProgramasFiltrada[el].show_id, 0,setListaEpisodios)}\n        alt=\"Avatar\" src={listaProgramasFiltrada[el].image_url} width={176} height={180}/>)\n\n    }\n    if(programaNoticia.length > 0){\n      content.push(<img \n      alt=\"Avatar\" src={programaNoticia[0].image_url} width={176} height={180}/>)\n    }\n\n    if(listaNoticias.length == 5){\n      for(let el in listaNoticias){\n        content.push(<div>{listaNoticias[el].titulo}<br></br><span>{listaNoticias[el].descricao}</span><button onClick={()=>cria_player(listaNoticias[el])}>Play</button><br></br><br></br></div>)\n      }\n    }\n\n    \n    return content\n\n    \n   }\n \n  \n  if (listaNoticias !== []) {\n    return (\n      <div>\n        <MultiPlayer urls={[\"http://servidor21.brlogic.com:7712/live\"]}/>\n        <img style={{}} src=\"fundo_broadcast.png\"/>\n\n      \n        <p>Resultados para: {dados.fullname}</p>\n       {dados.image_url !== undefined &&(\n        getImages()\n        \n       )}\n       \n\n      </div>\n    )\n   \n    }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}