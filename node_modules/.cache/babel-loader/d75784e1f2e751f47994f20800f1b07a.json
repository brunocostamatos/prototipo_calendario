{"ast":null,"code":"function GetEpisode(PodcastID, setListaNoticias, setListaEpisodios) {\n  fetch(`https://api.spreaker.com/v2/shows/` + PodcastID + `/episodes?limit=5` //ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS\n  ).then(response => response.json()).then(episodes => {\n    return episodes;\n  }).then(episodes => {\n    if (episodes.response.items[0].show_id != '4119263') {\n      let quantidade_episodios = episodes.response.items.length;\n      var lista_episodio = [];\n      var lista_descricao_programa = [];\n\n      for (var i = 0; i < quantidade_episodios; i++) {\n        fetch(`https://api.spreaker.com/v2/episodes/` + episodes.response.items[i].episode_id).then(response => response.json()).then(episodio => {\n          lista_episodio.push(episodio.response.episode);\n        });\n        fetch(`https://api.spreaker.com/v2/shows/` + PodcastID).then(response => response.json()).then(podcast_titulo => {\n          lista_descricao_programa.push({\n            descricao_programa: podcast_titulo.response.show.description\n          });\n          console.log(lista_descricao_programa);\n        });\n      }\n\n      setListaEpisodios(lista_episodio);\n    } else {\n      var lista_noticias = [];\n\n      for (var i = 0; i < episodes.response.items.length; i++) {\n        fetch(`https://api.spreaker.com/v2/episodes/` + episodes.response.items[i].episode_id).then(response => response.json()).then(episodio => {\n          lista_noticias.push({\n            episodio_id: episodio.response.episode.episode_id,\n            descricao: episodio.response.episode.description,\n            audio: episodio.response.episode.playback_url,\n            titulo: episodio.response.episode.title\n          });\n        });\n      }\n\n      setListaNoticias(lista_noticias);\n    }\n  });\n}\n\n_c = GetEpisode;\nexport default GetEpisode;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEpisode\");","map":{"version":3,"sources":["/home/bruno/Área de Trabalho/teste_versao_direta/src/getEpisode.js"],"names":["GetEpisode","PodcastID","setListaNoticias","setListaEpisodios","fetch","then","response","json","episodes","items","show_id","quantidade_episodios","length","lista_episodio","lista_descricao_programa","i","episode_id","episodio","push","episode","podcast_titulo","descricao_programa","show","description","console","log","lista_noticias","episodio_id","descricao","audio","playback_url","titulo","title"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,SAApB,EAA+BC,gBAA/B,EAAiDC,iBAAjD,EAAmE;AAE/DC,EAAAA,KAAK,CAAE,oCAAD,GACcH,SADd,GAEe,mBAFhB,CAEmC;AAFnC,GAAL,CAICI,IAJD,CAIOC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EAJlB,EAKCF,IALD,CAKOG,QAAD,IAAc;AAChB,WAAOA,QAAP;AACH,GAPD,EAQCH,IARD,CAQOG,QAAD,IAAY;AAGd,QAAGA,QAAQ,CAACF,QAAT,CAAkBG,KAAlB,CAAwB,CAAxB,EAA2BC,OAA3B,IAAsC,SAAzC,EAAmD;AAE/C,UAAIC,oBAAoB,GAAGH,QAAQ,CAACF,QAAT,CAAkBG,KAAlB,CAAwBG,MAAnD;AACA,UAAIC,cAAc,GAAC,EAAnB;AACA,UAAIC,wBAAwB,GAAC,EAA7B;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGJ,oBAAjB,EAAuCI,CAAC,EAAxC,EAA2C;AAEvCX,QAAAA,KAAK,CAAE,uCAAD,GAAwCI,QAAQ,CAACF,QAAT,CAAkBG,KAAlB,CAAwBM,CAAxB,EAA2BC,UAApE,CAAL,CACKX,IADL,CACWC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEWY,QAAD,IAAY;AAEdJ,UAAAA,cAAc,CAACK,IAAf,CAAoBD,QAAQ,CAACX,QAAT,CAAkBa,OAAtC;AACH,SALL;AAMAf,QAAAA,KAAK,CAAE,oCAAD,GAAqCH,SAAtC,CAAL,CACKI,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWe,cAAD,IAAmB;AACrBN,UAAAA,wBAAwB,CAACI,IAAzB,CAA8B;AAACG,YAAAA,kBAAkB,EAAED,cAAc,CAACd,QAAf,CAAwBgB,IAAxB,CAA6BC;AAAlD,WAA9B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYX,wBAAZ;AACH,SALL;AAOD;;AAGHX,MAAAA,iBAAiB,CAACU,cAAD,CAAjB;AAIH,KA3BD,MA4BI;AACA,UAAIa,cAAc,GAAC,EAAnB;;AACA,WAAI,IAAIX,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGP,QAAQ,CAACF,QAAT,CAAkBG,KAAlB,CAAwBG,MAAzC,EAAiDG,CAAC,EAAlD,EAAqD;AAEjDX,QAAAA,KAAK,CAAE,uCAAD,GAAwCI,QAAQ,CAACF,QAAT,CAAkBG,KAAlB,CAAwBM,CAAxB,EAA2BC,UAApE,CAAL,CACKX,IADL,CACWC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEWY,QAAD,IAAY;AACdS,UAAAA,cAAc,CAACR,IAAf,CAAoB;AAChBS,YAAAA,WAAW,EAAEV,QAAQ,CAACX,QAAT,CAAkBa,OAAlB,CAA0BH,UADvB;AAEhBY,YAAAA,SAAS,EAAEX,QAAQ,CAACX,QAAT,CAAkBa,OAAlB,CAA0BI,WAFrB;AAGhBM,YAAAA,KAAK,EAAEZ,QAAQ,CAACX,QAAT,CAAkBa,OAAlB,CAA0BW,YAHjB;AAIhBC,YAAAA,MAAM,EAAEd,QAAQ,CAACX,QAAT,CAAkBa,OAAlB,CAA0Ba;AAJlB,WAApB;AAMH,SATL;AAUD;;AAEH9B,MAAAA,gBAAgB,CAACwB,cAAD,CAAhB;AACD;AAEN,GA1DD;AA6DH;;KA/DQ1B,U;AAgET,eAAeA,UAAf","sourcesContent":["function GetEpisode(PodcastID, setListaNoticias, setListaEpisodios){\n    \n    fetch(`https://api.spreaker.com/v2/shows/` +\n                        PodcastID +\n                        `/episodes?limit=5` //ESTÁ LIMITANDO PARA OS 5 PRIMEIROS EPISODIOS\n    )\n    .then((response)=>response.json())\t\n    .then((episodes) => {\n        return episodes;\n    })\n    .then((episodes)=>{\n        \n        \n        if(episodes.response.items[0].show_id != '4119263'){\n          \n            let quantidade_episodios = episodes.response.items.length\n            var lista_episodio=[];\n            var lista_descricao_programa=[];\n            for(var i=0; i < quantidade_episodios; i++){\n\n                fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                    .then((response)=>response.json())\n                    .then((episodio)=>{\n                        \n                        lista_episodio.push(episodio.response.episode)\n                    })\n                fetch(`https://api.spreaker.com/v2/shows/`+PodcastID) \n                    .then((response) => response.json())\n                    .then((podcast_titulo) =>{\n                        lista_descricao_programa.push({descricao_programa: podcast_titulo.response.show.description})\n                        console.log(lista_descricao_programa)\n                    })\n\n              }\n\n\n            setListaEpisodios(lista_episodio)\n            \n            \n            \n        }  \n        else{\n            var lista_noticias=[];\n            for(var i=0; i < episodes.response.items.length; i++){\n                \n                fetch(`https://api.spreaker.com/v2/episodes/`+episodes.response.items[i].episode_id)\n                    .then((response)=>response.json())\n                    .then((episodio)=>{\n                        lista_noticias.push({\n                            episodio_id: episodio.response.episode.episode_id,\n                            descricao: episodio.response.episode.description,\n                            audio: episodio.response.episode.playback_url,\n                            titulo: episodio.response.episode.title\n                        })\n                    })\n              }\n            \n            setListaNoticias(lista_noticias)\n          }\n        \n    })\n\n \n}\nexport default GetEpisode\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}